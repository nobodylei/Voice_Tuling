package com.lei.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lei.voice_tuling.model.ChatRecords;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_RECORDS".
*/
public class ChatRecordsDao extends AbstractDao<ChatRecords, Long> {

    public static final String TABLENAME = "CHAT_RECORDS";

    /**
     * Properties of entity ChatRecords.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TextOrVoice = new Property(1, int.class, "textOrVoice", false, "TEXT_OR_VOICE");
        public final static Property Who = new Property(2, int.class, "who", false, "WHO");
        public final static Property Date = new Property(3, java.util.Date.class, "date", false, "DATE");
        public final static Property Text = new Property(4, String.class, "text", false, "TEXT");
    }


    public ChatRecordsDao(DaoConfig config) {
        super(config);
    }
    
    public ChatRecordsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_RECORDS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TEXT_OR_VOICE\" INTEGER NOT NULL ," + // 1: textOrVoice
                "\"WHO\" INTEGER NOT NULL ," + // 2: who
                "\"DATE\" INTEGER," + // 3: date
                "\"TEXT\" TEXT);"); // 4: text
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_RECORDS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatRecords entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTextOrVoice());
        stmt.bindLong(3, entity.getWho());
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(4, date.getTime());
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(5, text);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatRecords entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTextOrVoice());
        stmt.bindLong(3, entity.getWho());
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(4, date.getTime());
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(5, text);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChatRecords readEntity(Cursor cursor, int offset) {
        ChatRecords entity = new ChatRecords( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // textOrVoice
            cursor.getInt(offset + 2), // who
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // date
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // text
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatRecords entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTextOrVoice(cursor.getInt(offset + 1));
        entity.setWho(cursor.getInt(offset + 2));
        entity.setDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setText(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChatRecords entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChatRecords entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatRecords entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
